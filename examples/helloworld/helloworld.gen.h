// Generated by fabric_rpc_cpp_plugin. Do not Edit.
// source: helloworld.proto
#pragma once
#include "helloworld.pb.h"
#include "fabrictransport_.h"
#include <atlbase.h>
#include <atlcom.h>
#include "fabricrpc/Operation.h"
#include "fabricrpc/FRPCHeader.h"
// Service pkg helloworld.
namespace helloworld {
class FabricHello final {
  public:
  static constexpr char const* service_full_name() {
    return "helloworld.FabricHello";
  }
  class Service : public fabricrpc::MiddleWare {
    public:
    Service() {};
    virtual ~Service() {};
    virtual fabricrpc::Status BeginSayHello(const FabricRequest* request, IFabricAsyncOperationCallback *callback, /*out*/ IFabricAsyncOperationContext **context) = 0;
    virtual fabricrpc::Status EndSayHello(IFabricAsyncOperationContext *context, /*out*/FabricResponse* response) = 0;
    virtual fabricrpc::Status Route(const std::string & url, std::unique_ptr<fabricrpc::IBeginOperation> & beginOp, std::unique_ptr<fabricrpc::IEndOperation> & endOp) override;
  };
};
void CreateFabricRPCRequestHandler(std::shared_ptr<fabricrpc::MiddleWare> svc, IFabricTransportMessageHandler ** handler);
} // namespace helloworld
// Client code
namespace helloworld {
class FabricHelloClient{
public:
  FabricHelloClient(IFabricTransportClient * client);
  fabricrpc::Status BeginSayHello(const FabricRequest* request, IFabricAsyncOperationCallback *callback, /*out*/ IFabricAsyncOperationContext **context);
  fabricrpc::Status EndSayHello(IFabricAsyncOperationContext *context, /*out*/FabricResponse* response);
private:
  CComPtr<IFabricTransportClient> client_;
  std::shared_ptr<fabricrpc::IFabricRPCHeaderProtoConverter> cv_;
};
} // namespace helloworld
