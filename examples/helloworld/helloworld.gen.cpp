// Generated by fabric_rpc_cpp_plugin. Do not Edit.
// source: helloworld.proto
#include "helloworld.fabricrpc.h"
#include <functional>
#include "fabricrpc/ClientHelpers.h"
#include "fabricrpc/FRPCRequestHandler.h"
// Service pkg helloworld.
namespace helloworld {
fabricrpc::Status FabricHello::Service::Route(const std::string & url, std::unique_ptr<fabricrpc::IBeginOperation> & beginOp, std::unique_ptr<fabricrpc::IEndOperation> & endOp) {
  if (url == "/helloworld.FabricHello/SayHello") {
    auto bo = std::bind(&Service::BeginSayHello, this, std::placeholders::_1,
                  std::placeholders::_2, std::placeholders::_3);
    auto eo = std::bind(&Service::EndSayHello, this, std::placeholders::_1,
                  std::placeholders::_2);
    beginOp = std::make_unique<fabricrpc::BeginOperation<FabricRequest>>(bo);
    endOp = std::make_unique<fabricrpc::EndOperation<FabricResponse>>(eo);
  } else {
    return fabricrpc::Status(fabricrpc::StatusCode::NOT_FOUND, "method not found: " + url);
  }
  return fabricrpc::Status();
}
void CreateFabricRPCRequestHandler(std::shared_ptr<fabricrpc::MiddleWare> svc,
                                    IFabricTransportMessageHandler **handler) {
  CComPtr<CComObjectNoLock<fabricrpc::FRPCRequestHandler>> msgHandlerPtr(
    new CComObjectNoLock<fabricrpc::FRPCRequestHandler>());
  msgHandlerPtr->Initialize(svc);
  *handler = msgHandlerPtr.Detach();
}
} // namespace helloworld
// Client code
namespace helloworld {
FabricHelloClient::FabricHelloClient(IFabricTransportClient *client)
  : client_() {
  client->AddRef();
  client_.Attach(client);
}
fabricrpc::Status FabricHelloClient::BeginSayHello(const FabricRequest* request, IFabricAsyncOperationCallback *callback, /*out*/ IFabricAsyncOperationContext **context){
  return fabricrpc::ExecClientBegin(client_, "/helloworld.FabricHello/SayHello", request,
             callback, context);}
fabricrpc::Status FabricHelloClient::EndSayHello(IFabricAsyncOperationContext *context, /*out*/FabricResponse* response){
  return fabricrpc::ExecClientEnd(client_, context, response);}
} // namespace helloworld
