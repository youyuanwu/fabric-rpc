name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        BUILD_TYPE: ["Debug", "Release"]
        os: [ windows-latest ]
        BOOST_VERSION: [ 1.79.0 ]
    steps:
    - uses: actions/checkout@v2

    - name: Get MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Get specific version CMake
      uses: lukka/get-cmake@v3.25.1
    
    - name: Get Boost
      uses: MarkusJx/install-boost@v2.4.1
      id: install-boost
      with:
        # REQUIRED: Specify the required boost version
        # A list of supported versions can be found here: 
        # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
        boost_version: ${{ matrix.BOOST_VERSION }}
        toolset: msvc
        platform_version: 2022
        link: static

    # assume sf runtime is installed in github runner
    # - name: check sf exist
    #   run: Powershell.exe -File .\scripts\check_sf_installed.ps1
    - name: Get OpenCppCoverage
      if: ${{ matrix.BUILD_TYPE == 'Debug' }}
      env:
        myUrl: "https://github.com/OpenCppCoverage/OpenCppCoverage/releases/download/release-0.9.9.0/OpenCppCoverageSetup-x64-0.9.9.0.exe"
      run: |
        powershell.exe -Command "Invoke-WebRequest $env:myUrl -OutFile $env:Temp/OpenCppCoverageSetup-x64-0.9.9.0.exe"
        powershell.exe -Command "& $env:Temp/OpenCppCoverageSetup-x64-0.9.9.0.exe /silent"
        powershell.exe -Command "Add-Content $env:GITHUB_PATH 'C:\Program Files\OpenCppCoverage'"

    - name: run cmake
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      run: > 
        cmake . -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} -B build
    - name: run build
      run: cmake --build build --config ${{ matrix.BUILD_TYPE }}
    
    - name: run test
      run: ctest -C ${{ matrix.BUILD_TYPE }} --test-dir build --verbose --repeat until-pass:3 --timeout 30

    - name: run test with coverage
      if: ${{ matrix.BUILD_TYPE == 'Debug' }}
      run: >
        cmake --build build --config ${{ matrix.BUILD_TYPE }} --target coverage

    - name: run some bench tests
      run: .\build\tests\helloworld_bench\${{ matrix.BUILD_TYPE }}\helloworld_bench.exe -- --concurrency 100 --connections 100 --test_sec 5
    
    - name: run some bench tests
      run: .\build\tests\helloworld_bench\${{ matrix.BUILD_TYPE }}\helloworld_bench.exe --detect_memory_leaks=0 -- --concurrency 100 --connections 1000 --test_sec 5

    - name: run some bench tests
      run: .\build\tests\helloworld_bench\${{ matrix.BUILD_TYPE }}\helloworld_bench.exe --detect_memory_leaks=0 -- --concurrency 100 --connections 1000 --test_sec 5

    - name: run some bench tests
      run: .\build\tests\helloworld_bench\${{ matrix.BUILD_TYPE }}\helloworld_bench.exe --detect_memory_leaks=0 -- --concurrency 1000 --connections 50 --test_sec 30

    - name: Upload Report to Codecov
      if: ${{ matrix.BUILD_TYPE == 'Debug' }}
      uses: codecov/codecov-action@v2
      with:
        files: ./cobertura.xml
        fail_ci_if_error: true
        functionalities: fix