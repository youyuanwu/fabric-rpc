// Generated by fabric_rpc_cpp_plugin. Do not Edit.
// source: helloworld.proto
#include "fabricrpc/ClientHelpers.h"
#include "fabricrpc/FRPCHeader.h"
#include "fabricrpc/FRPCRequestHandler.h"
#include "helloworld.fabricrpc.h"
#include <fabricrpc.pb.h>
#include <functional>
// Service pkg helloworld.
namespace helloworld {
fabricrpc::Status FabricHello::Service::Route(
    const std::string &url,
    std::unique_ptr<fabricrpc::IBeginOperation> &beginOp,
    std::unique_ptr<fabricrpc::IEndOperation> &endOp) {
  if (url == "/helloworld.FabricHello/SayHello") {
    auto bo = std::bind(&Service::BeginSayHello, this, std::placeholders::_1,
                        std::placeholders::_2, std::placeholders::_3);
    auto eo = std::bind(&Service::EndSayHello, this, std::placeholders::_1,
                        std::placeholders::_2);
    beginOp = std::make_unique<fabricrpc::BeginOperation<FabricRequest>>(bo);
    endOp = std::make_unique<fabricrpc::EndOperation<FabricResponse>>(eo);
  } else {
    return fabricrpc::Status(fabricrpc::StatusCode::NOT_FOUND,
                             "method not found: " + url);
  }
  return fabricrpc::Status();
}
void CreateFabricRPCRequestHandler(
    const std::vector<std::shared_ptr<fabricrpc::MiddleWare>> &svcList,
    IFabricTransportMessageHandler **handler) {
  using privateconverter =
      fabricrpc::FabricRPCHeaderProtoConverter<fabricrpc::request_header,
                                               fabricrpc::reply_header>;
  std::shared_ptr<fabricrpc::IFabricRPCHeaderProtoConverter> cv =
      std::make_shared<privateconverter>();
  CComPtr<CComObjectNoLock<fabricrpc::FRPCRequestHandler>> msgHandlerPtr(
      new CComObjectNoLock<fabricrpc::FRPCRequestHandler>());
  msgHandlerPtr->Initialize(svcList, cv);
  *handler = msgHandlerPtr.Detach();
}
} // namespace helloworld
// Client code
namespace helloworld {
using privateconverter =
    fabricrpc::FabricRPCHeaderProtoConverter<fabricrpc::request_header,
                                             fabricrpc::reply_header>;
FabricHelloClient::FabricHelloClient(IFabricTransportClient *client)
    : client_(), cv_(std::make_shared<privateconverter>()) {
  client->AddRef();
  client_.Attach(client);
}
fabricrpc::Status FabricHelloClient::BeginSayHello(
    const FabricRequest *request, IFabricAsyncOperationCallback *callback,
    /*out*/ IFabricAsyncOperationContext **context) {
  return fabricrpc::ExecClientBegin(client_, cv_,
                                    "/helloworld.FabricHello/SayHello", request,
                                    callback, context);
}
fabricrpc::Status
FabricHelloClient::EndSayHello(IFabricAsyncOperationContext *context,
                               /*out*/ FabricResponse *response) {
  return fabricrpc::ExecClientEnd(client_, cv_, context, response);
}
} // namespace helloworld
